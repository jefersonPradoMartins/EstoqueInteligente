// <auto-generated />
using System;
using EstoqueInteligente.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstoqueInteligente.Infra.Migrations
{
    [DbContext(typeof(Context.Context))]
    [Migration("20230821075756_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Bairro", b =>
                {
                    b.Property<int>("CodigoBairro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoBairro"));

                    b.Property<string>("NomeBairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoBairro");

                    b.ToTable("Bairro", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoBairro = 1,
                            NomeBairro = "Centro"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("CodigoCidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoCidade"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoIBGE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.HasKey("CodigoCidade");

                    b.ToTable("Cidade", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoCidade = 1,
                            CEP = "15760000",
                            CodigoIBGE = "3555802",
                            NomeCidade = "Urania",
                            UF = "SP"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ConfiguracaoEmpresa", b =>
                {
                    b.Property<int>("CodigoEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEmpresa"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("CodigoPessoaJuridica")
                        .HasColumnType("int");

                    b.Property<string>("NomeFilial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoEmpresa");

                    b.HasIndex("CodigoPessoaJuridica")
                        .IsUnique();

                    b.ToTable("ConfiguracaoEmpresa", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEmpresa = 1,
                            Ativo = true,
                            CodigoPessoaJuridica = 1,
                            NomeFilial = "Empresa Teste"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Contato", b =>
                {
                    b.Property<int>("CodigoContato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoContato"));

                    b.Property<int>("CodigoContatoTipo")
                        .HasColumnType("int");

                    b.Property<int>("CodigoPessoa")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoContato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoContato");

                    b.HasIndex("CodigoContatoTipo")
                        .IsUnique();

                    b.HasIndex("CodigoPessoa")
                        .IsUnique();

                    b.ToTable("Contato", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoContato = 1,
                            CodigoContatoTipo = 1,
                            CodigoPessoa = 1,
                            DescricaoContato = "17988414859"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ContatoTipo", b =>
                {
                    b.Property<int>("CodigoContatoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoContatoTipo"));

                    b.Property<string>("NomeContato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoContatoTipo");

                    b.ToTable("Contato_Tipo", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoContatoTipo = 1,
                            NomeContato = "Whatsapp"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("CodigoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEndereco"));

                    b.Property<int>("CodigoBairro")
                        .HasColumnType("int");

                    b.Property<int>("CodigoCidade")
                        .HasColumnType("int");

                    b.Property<int>("CodigoPessoa")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoEndereco");

                    b.HasIndex("CodigoBairro")
                        .IsUnique();

                    b.HasIndex("CodigoCidade")
                        .IsUnique();

                    b.HasIndex("CodigoPessoa")
                        .IsUnique();

                    b.ToTable("Endereco", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEndereco = 1,
                            CodigoBairro = 1,
                            CodigoCidade = 1,
                            CodigoPessoa = 1,
                            Complemento = "Perdo da casa da maria",
                            Numero = "1822",
                            Rua = "Rua santa maria"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.Organizacao", b =>
                {
                    b.Property<int>("CodigoOrganizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoOrganizacao"));

                    b.Property<string>("NomeOrganizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoOrganizacao");

                    b.ToTable("Organizacoes", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoOrganizacao")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Member")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoOrganizacao");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.NCM", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ano_Ato")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Data_Fim")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Data_Inicio")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero_Ato")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Tipo_Ato")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Codigo");

                    b.ToTable("NCM", (string)null);

                    b.HasData(
                        new
                        {
                            Codigo = "01",
                            Ano_Ato = "2021",
                            Data_Fim = "31/12/9999",
                            Data_Inicio = "01/04/2022",
                            Descricao = "Animais vivos",
                            Numero_Ato = "000272",
                            Tipo_Ato = "Res Camex"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.NCMEStatistica", b =>
                {
                    b.Property<int>("CodigoNCMEstatistica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoNCMEstatistica"));

                    b.Property<string>("Ato")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Data_Ultima_Atualizacao_NCM")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CodigoNCMEstatistica");

                    b.ToTable("NCM_EStatistica", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoNCMEstatistica = 1,
                            Ato = "Resolução Camex nº 440/2022",
                            Data_Ultima_Atualizacao_NCM = "01/04/2023"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Pessoa", b =>
                {
                    b.Property<int>("CodigoPessoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoPessoa"));

                    b.HasKey("CodigoPessoa");

                    b.ToTable("Pessoa", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoPessoa = 1
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.PessoaFisica", b =>
                {
                    b.Property<int>("CodigoPessoaFisica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoPessoaFisica"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPessoa")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RGOrgao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RGOrgaoUF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<bool>("UtilizaNomeSocial")
                        .HasColumnType("bit");

                    b.HasKey("CodigoPessoaFisica");

                    b.HasIndex("CodigoPessoa")
                        .IsUnique();

                    b.ToTable("Pessoa_Fisica", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoPessoaFisica = 1,
                            Ativo = true,
                            CPF = "69850578025",
                            CodigoPessoa = 1,
                            DataCadastro = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3071),
                            DataNascimento = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Eliminado = false,
                            Nome = "Jeferson",
                            NomeCompleto = "Jeferson Willian do prado martins",
                            NomeSocial = "",
                            RG = "402287897",
                            RGOrgao = "SSP",
                            RGOrgaoUF = "SP",
                            Sexo = 0,
                            UtilizaNomeSocial = false
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.PessoaJuridica", b =>
                {
                    b.Property<int>("CodigoPessoaJuridica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoPessoaJuridica"));

                    b.Property<string>("CNAE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPessoa")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("IE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoPessoaJuridica");

                    b.HasIndex("CodigoPessoa")
                        .IsUnique();

                    b.ToTable("Pessoa_Juridica", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoPessoaJuridica = 1,
                            CNAE = "7518",
                            CNPJ = "47473617000198",
                            CodigoPessoa = 1,
                            DataCadastro = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3233),
                            IE = "683462917135",
                            NomeFantasia = "Nome Fantasia empresa LDTA",
                            RazaoSocial = "Razão Social Empresa LTDA"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("CodigoProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoProduto"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoCompletaProduto")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescricaoResumidaProduto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("NCMCodigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomeProduto")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProdutoClasseTerapeuticaCodigoClasseTerapeutica")
                        .HasColumnType("int");

                    b.Property<int?>("ProdutoFormulaCodigoFurmula")
                        .HasColumnType("int");

                    b.Property<string>("RegistroMS")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CodigoProduto");

                    b.HasIndex("NCMCodigo");

                    b.HasIndex("ProdutoClasseTerapeuticaCodigoClasseTerapeutica");

                    b.HasIndex("ProdutoFormulaCodigoFurmula");

                    b.ToTable("Produto", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoProduto = 1,
                            Ativo = true,
                            DataCadastro = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3286),
                            DescricaoCompletaProduto = "Descricao completa do produto",
                            DescricaoResumidaProduto = "Descricao Resumida do produto",
                            Eliminado = false,
                            NomeProduto = "Nome do produto"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoClasseTerapeutica", b =>
                {
                    b.Property<int?>("CodigoClasseTerapeutica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CodigoClasseTerapeutica"));

                    b.Property<string>("NomeClasseTerapeutica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoClasseTerapeutica");

                    b.ToTable("Produto_ClasseTerapeutica", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoClasseTerapeutica = 1,
                            NomeClasseTerapeutica = "Antimicrobiano"
                        },
                        new
                        {
                            CodigoClasseTerapeutica = 2,
                            NomeClasseTerapeutica = "Psicotropico"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoCodigoBarra", b =>
                {
                    b.Property<int>("CodigoBarra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoBarra"));

                    b.Property<int>("CodigoProduto")
                        .HasColumnType("int");

                    b.Property<string>("GTIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoBarra");

                    b.HasIndex("CodigoProduto")
                        .IsUnique();

                    b.ToTable("Produto_CodigoBarra", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoBarra = 1,
                            CodigoProduto = 1,
                            GTIN = "788848488484848"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEmbalagem", b =>
                {
                    b.Property<int>("CodigoEmbalagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEmbalagem"));

                    b.Property<string>("DescricaoEmbalagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantidadePorEmbalagem")
                        .HasColumnType("int");

                    b.Property<string>("SiglaEmbalagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoEmbalagem");

                    b.ToTable("Produto_Embalagem", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEmbalagem = 1,
                            DescricaoEmbalagem = "Unidade",
                            QuantidadePorEmbalagem = 1,
                            SiglaEmbalagem = "UN"
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstatistica", b =>
                {
                    b.Property<int>("CodigoEstatistica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEstatistica"));

                    b.Property<int>("CodigoProdutoEstoque")
                        .HasColumnType("int");

                    b.Property<double>("PrecoUltimaCompra")
                        .HasColumnType("float");

                    b.Property<double>("PrecoUltimaVenda")
                        .HasColumnType("float");

                    b.Property<DateTime>("UltimaCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UltimaVenda")
                        .HasColumnType("datetime2");

                    b.HasKey("CodigoEstatistica");

                    b.HasIndex("CodigoProdutoEstoque")
                        .IsUnique();

                    b.ToTable("Produto_Estatistica", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEstatistica = 1,
                            CodigoProdutoEstoque = 1,
                            PrecoUltimaCompra = 16.219999999999999,
                            PrecoUltimaVenda = 32.219999999999999,
                            UltimaCompra = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3348),
                            UltimaVenda = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3349)
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoque", b =>
                {
                    b.Property<int>("CodigoEstoque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEstoque"));

                    b.Property<int>("CodigoConfiguracaoEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("CodigoProduto")
                        .HasColumnType("int");

                    b.Property<int>("Estoque")
                        .HasColumnType("int");

                    b.HasKey("CodigoEstoque");

                    b.HasIndex("CodigoConfiguracaoEmpresa")
                        .IsUnique();

                    b.HasIndex("CodigoProduto")
                        .IsUnique();

                    b.ToTable("Produto_Estoque", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEstoque = 1,
                            CodigoConfiguracaoEmpresa = 1,
                            CodigoProduto = 1,
                            Estoque = 10
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoqueControle", b =>
                {
                    b.Property<int>("CodigoEstoqueControle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEstoqueControle"));

                    b.Property<int>("CodigoProdutoEmbalagem")
                        .HasColumnType("int");

                    b.Property<int>("CodigoProdutoEstoque")
                        .HasColumnType("int");

                    b.Property<string>("CurvaABC")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("DataCurvaAplicada")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstoqueDemanda")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueDemandaMaxima")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueDemandaMinima")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueMaximo")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueMinimo")
                        .HasColumnType("int");

                    b.HasKey("CodigoEstoqueControle");

                    b.HasIndex("CodigoProdutoEmbalagem")
                        .IsUnique();

                    b.HasIndex("CodigoProdutoEstoque")
                        .IsUnique();

                    b.ToTable("Produto_EstoqueControle", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEstoqueControle = 1,
                            CodigoProdutoEmbalagem = 1,
                            CodigoProdutoEstoque = 1,
                            CurvaABC = "A",
                            DataCurvaAplicada = new DateTime(2023, 8, 21, 4, 57, 56, 441, DateTimeKind.Local).AddTicks(3360),
                            EstoqueDemanda = 58,
                            EstoqueDemandaMaxima = 78,
                            EstoqueDemandaMinima = 38,
                            EstoqueMaximo = 0,
                            EstoqueMinimo = 0
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoqueLote", b =>
                {
                    b.Property<int>("CodigoEstoqueLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEstoqueLote"));

                    b.Property<int>("CodigoProdutoEstoque")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFabricacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estoque")
                        .HasColumnType("int");

                    b.Property<string>("Lote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoEstoqueLote");

                    b.HasIndex("CodigoProdutoEstoque")
                        .IsUnique();

                    b.ToTable("Produto_EstoqueLote", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoquePrecificacao", b =>
                {
                    b.Property<int>("CodigoEstoquePrecificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoEstoquePrecificacao"));

                    b.Property<int>("CodigoProdutoEstoque")
                        .HasColumnType("int");

                    b.Property<int>("Markup")
                        .HasColumnType("int");

                    b.Property<double>("PrecoCompra")
                        .HasColumnType("float");

                    b.Property<double>("PrecoCusto")
                        .HasColumnType("float");

                    b.Property<double>("PrecoCustoMedio")
                        .HasColumnType("float");

                    b.Property<double>("PrecoIncentivo")
                        .HasColumnType("float");

                    b.HasKey("CodigoEstoquePrecificacao");

                    b.HasIndex("CodigoProdutoEstoque")
                        .IsUnique();

                    b.ToTable("Produto_EstoquePrecificacao", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoEstoquePrecificacao = 1,
                            CodigoProdutoEstoque = 1,
                            Markup = 120,
                            PrecoCompra = 16.219999999999999,
                            PrecoCusto = 19.23,
                            PrecoCustoMedio = 20.109999999999999,
                            PrecoIncentivo = 0.0
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoFormula", b =>
                {
                    b.Property<int?>("CodigoFurmula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CodigoFurmula"));

                    b.Property<string>("NomeFormula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoFurmula");

                    b.ToTable("Produto_Formula", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoGrupo", b =>
                {
                    b.Property<int>("CodigoGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoGrupo"));

                    b.Property<string>("NomeGrupo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unico")
                        .HasColumnType("bit");

                    b.HasKey("CodigoGrupo");

                    b.ToTable("Produto_Grupo", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoGrupo = 1,
                            NomeGrupo = "Generico",
                            Unico = true
                        });
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoImagem", b =>
                {
                    b.Property<int>("CodigoImagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoImagem"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Imagem")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CodigoImagem");

                    b.ToTable("ProdutoImagem", (string)null);
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Substancia", b =>
                {
                    b.Property<int>("CodigoSubstancia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoSubstancia"));

                    b.Property<string>("NomeSubstancia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoSubstancia");

                    b.ToTable("Substancia", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProdutoFormulaSubstancia", b =>
                {
                    b.Property<int>("ProdutoFormulaCodigoFurmula")
                        .HasColumnType("int");

                    b.Property<int>("SubstanciasCodigoSubstancia")
                        .HasColumnType("int");

                    b.HasKey("ProdutoFormulaCodigoFurmula", "SubstanciasCodigoSubstancia");

                    b.HasIndex("SubstanciasCodigoSubstancia");

                    b.ToTable("ProdutoFormulaSubstancia");
                });

            modelBuilder.Entity("ProdutoProdutoGrupo", b =>
                {
                    b.Property<int>("ProdutoGrupoCodigoGrupo")
                        .HasColumnType("int");

                    b.Property<int>("ProdutosCodigoProduto")
                        .HasColumnType("int");

                    b.HasKey("ProdutoGrupoCodigoGrupo", "ProdutosCodigoProduto");

                    b.HasIndex("ProdutosCodigoProduto");

                    b.ToTable("ProdutoProdutoGrupo");
                });

            modelBuilder.Entity("ProdutoProdutoImagem", b =>
                {
                    b.Property<int>("ProdutoCodigoProduto")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoImagemCodigoImagem")
                        .HasColumnType("int");

                    b.HasKey("ProdutoCodigoProduto", "ProdutoImagemCodigoImagem");

                    b.HasIndex("ProdutoImagemCodigoImagem");

                    b.ToTable("ProdutoProdutoImagem");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ConfiguracaoEmpresa", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.PessoaJuridica", "PessoaJuridica")
                        .WithOne("ConfiguracaoEmpresa")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ConfiguracaoEmpresa", "CodigoPessoaJuridica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PessoaJuridica");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Contato", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ContatoTipo", "ContatoTipo")
                        .WithOne("Contato")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.Contato", "CodigoContatoTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("Contato")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.Contato", "CodigoPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContatoTipo");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Bairro", "Bairro")
                        .WithOne("Endereco")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.Endereco", "CodigoBairro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Cidade", "Cidade")
                        .WithOne("Endereco")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.Endereco", "CodigoCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("Endereco")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.Endereco", "CodigoPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bairro");

                    b.Navigation("Cidade");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.Organizacao", null)
                        .WithMany()
                        .HasForeignKey("CodigoOrganizacao");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.PessoaFisica", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("PessoaFisica")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.PessoaFisica", "CodigoPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.PessoaJuridica", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("PessoaJuridica")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.PessoaJuridica", "CodigoPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Produto", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.NCM", "NCM")
                        .WithMany("Produtos")
                        .HasForeignKey("NCMCodigo");

                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoClasseTerapeutica", "ProdutoClasseTerapeutica")
                        .WithMany("Produto")
                        .HasForeignKey("ProdutoClasseTerapeuticaCodigoClasseTerapeutica");

                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoFormula", "ProdutoFormula")
                        .WithMany("Produto")
                        .HasForeignKey("ProdutoFormulaCodigoFurmula");

                    b.Navigation("NCM");

                    b.Navigation("ProdutoClasseTerapeutica");

                    b.Navigation("ProdutoFormula");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoCodigoBarra", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Produto", "Produto")
                        .WithOne("ProdutoCodigoBarra")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoCodigoBarra", "CodigoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstatistica", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "ProdutoEstoque")
                        .WithOne("ProdutoEstatistica")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstatistica", "CodigoProdutoEstoque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoque", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ConfiguracaoEmpresa", "ConfiguracaoEmpresa")
                        .WithOne("ProdutoEstoque")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "CodigoConfiguracaoEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Produto", "Produto")
                        .WithOne("ProdutoEstoque")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "CodigoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfiguracaoEmpresa");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoqueControle", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoEmbalagem", "ProdutoEmbalagem")
                        .WithOne("ProdutoEstoqueControle")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoqueControle", "CodigoProdutoEmbalagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "ProdutoEstoque")
                        .WithOne("ProdutoEstoqueControle")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoqueControle", "CodigoProdutoEstoque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoEmbalagem");

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoqueLote", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "ProdutoEstoque")
                        .WithOne("ProdutoEstoqueLote")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoqueLote", "CodigoProdutoEstoque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoquePrecificacao", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoEstoque", "ProdutoEstoque")
                        .WithOne("ProdutoEstoquePrecificacao")
                        .HasForeignKey("EstoqueInteligente.Domain.Entities.ProdutoEstoquePrecificacao", "CodigoProdutoEstoque")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdutoEstoque");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProdutoFormulaSubstancia", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoFormula", null)
                        .WithMany()
                        .HasForeignKey("ProdutoFormulaCodigoFurmula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Substancia", null)
                        .WithMany()
                        .HasForeignKey("SubstanciasCodigoSubstancia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProdutoProdutoGrupo", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoGrupo", null)
                        .WithMany()
                        .HasForeignKey("ProdutoGrupoCodigoGrupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.Produto", null)
                        .WithMany()
                        .HasForeignKey("ProdutosCodigoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProdutoProdutoImagem", b =>
                {
                    b.HasOne("EstoqueInteligente.Domain.Entities.Produto", null)
                        .WithMany()
                        .HasForeignKey("ProdutoCodigoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstoqueInteligente.Domain.Entities.ProdutoImagem", null)
                        .WithMany()
                        .HasForeignKey("ProdutoImagemCodigoImagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Bairro", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Cidade", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ConfiguracaoEmpresa", b =>
                {
                    b.Navigation("ProdutoEstoque")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ContatoTipo", b =>
                {
                    b.Navigation("Contato")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.NCM", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Contato")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("PessoaFisica")
                        .IsRequired();

                    b.Navigation("PessoaJuridica")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.PessoaJuridica", b =>
                {
                    b.Navigation("ConfiguracaoEmpresa")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.Produto", b =>
                {
                    b.Navigation("ProdutoCodigoBarra");

                    b.Navigation("ProdutoEstoque")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoClasseTerapeutica", b =>
                {
                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEmbalagem", b =>
                {
                    b.Navigation("ProdutoEstoqueControle")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoEstoque", b =>
                {
                    b.Navigation("ProdutoEstatistica")
                        .IsRequired();

                    b.Navigation("ProdutoEstoqueControle")
                        .IsRequired();

                    b.Navigation("ProdutoEstoqueLote")
                        .IsRequired();

                    b.Navigation("ProdutoEstoquePrecificacao")
                        .IsRequired();
                });

            modelBuilder.Entity("EstoqueInteligente.Domain.Entities.ProdutoFormula", b =>
                {
                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
